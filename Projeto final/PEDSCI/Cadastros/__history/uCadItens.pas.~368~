unit uCadItens;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uFormPadraoCadastroPEDSCI,
  System.ImageList, Vcl.ImgList, Vcl.ComCtrls, Vcl.ToolWin, Vcl.StdCtrls, udmDadosPEDSCI,
  Data.DB, Datasnap.DBClient, System.Generics.Collections, uUtilPEDSCI;

type
  // ESSE OBJETO É UTILIZADO PARA GUARDAR DADOS DENTRO DO COMBOBOX E DO DICIONÁRIO
  TObjProduto = class
  public
    wCodProd  : Integer;
    wValUni   : Currency;
    wQuant    : Integer;
  end;

  TfrCadItens = class(TfrFormPadraoCadastroPEDSCI)
    lbProduto: TLabel;
    cbProduto: TComboBox;
    lbQuantidade: TLabel;
    edQuantidade: TEdit;
    btAdicionar: TButton;
    btRemover: TButton;
    lbAviso: TLabel;
    lbProdutos: TListBox;
    procedure FormShow(Sender: TObject);
    procedure btAdicionarClick(Sender: TObject);
    procedure btRemoverClick(Sender: TObject);
    procedure btOkClick(Sender: TObject);
  private
    { Private declarations }
    // VARIÁVEIS GLOBAIS
    wDicionario : TDictionary<String, TObjProduto>;

    // FUNÇÕES
    function fVerificaQuantidade() : Boolean;

    // PROCEDIMENTOS
    procedure pMontrarList();
  public
    { Public declarations }
    // VARIÁVEIS GLOBAIS
    wCodNota  : Integer;
    wCodEmp   : Integer;

    // FUNÇÕES
    function setTabela: TClientDataSet; override;

    // PROCEDIMENTOS
    procedure pPullBanco();
  end;

var
  frCadItens: TfrCadItens;

implementation

uses uLancNota;

{$R *.dfm}

procedure TfrCadItens.btAdicionarClick(Sender: TObject);
var
  wPasse  : Boolean;
  wKey    : String;
begin
  inherited;

  // VERIFICA SE OS CAMPOS SÃO VÁLIDOS
  wPasse := True;
  if not(fVerificaQuantidade) then
     wPasse := False;

  // CASO OS CAMPOS SEJAM VÁLIDOS
  if (wPasse) then
     begin
       // ADICIONA OS ITENS ESCOLHIDOS EM UM DICIONÁRIO
       if (wDicionario.ContainsKey(cbProduto.Text)) then
          wDicionario.Items[cbProduto.Text].wQuant := wDicionario[cbProduto.Text].wQuant + StrToInt(edQuantidade.Text)
       else
          begin
            wDicionario.Add(cbProduto.Text, TObjProduto(cbProduto.Items.Objects[cbProduto.ItemIndex]));
            wDicionario[cbProduto.Text].wQuant := StrToInt(edQuantidade.Text);
          end;

       // REMOVE UM ITEM SE A QUANTIDADE DELE FOR MENOR OU IGUAL A ZERO
       for wKey in wDicionario.Keys do
         begin
           if (wDicionario.Items[wKey].wQuant <= 0) then
              wDicionario.Remove(wKey);
         end;

       // ATUALIZA O LIST VIEW
       pMontrarList;
     end;

end;

procedure TfrCadItens.btOkClick(Sender: TObject);
var
  wItem       : TItemNota;
  wKey        : String;
  wCodItem    : Integer;
  wI          : Integer;
  wObjeto     : TObjProduto;
  wLancNota   : TfrLancNota;
  wValorTotal : Currency;
begin
  inherited;

  // CRIA O OBJETO WITEM
  wItem := TItemNota.Create;

  // SETA O CÓDIGO DO ITEM DENTRO DA NOTA FISCAL E CRIA UM VALOR TOTAL INICIAL
  wItem.wCodItem  := 0;
  wValorTotal     := 0;

  // PERCORRE CADA ITEM CADASTRADO NO DICIONÁRIO
  for wKey in wDicionario.Keys do
    begin
      // COLETA OS DADOS JÁ PASSADOS PELA TELA DE LANÇAMENTO DE NOTA
      wItem.wCodNota  := wCodNota;
      wItem.wCodEmp   := wCodEmp;

      // INCREMENTA O CÓDIGO DO ITEM DENTRO DA NOTA FISCAL
      inc(wItem.wCodItem);

      // COLOCA OS DADOS DENTRO DO OBJETO TITENS
      wItem.wCodProd    := wDicionario[wKey].wCodProd;
      wItem.wQuantidade := wDicionario[wKey].wQuant;
      wItem.wVlrUnit    := wDicionario[wKey].wValUni;
      wItem.wVlrTotal   := wDicionario[wKey].wValUni * wDicionario[wKey].wQuant;

      // COLETA O VALOR TOTAL GERAL DA NOTA
      wValorTotal       := wValorTotal + wItem.wVlrTotal;

      // INSERE O ITEM NO BANCO
      wItem.fDeletarItem;
      wItem.fInserirItem;
    end;

  // CONFIRMA O UPDATE DO BANCO DE DADOS
  dmDadosPEDSCI.tbItens.ApplyUpdates(0);

  // RETORNA PARA O USUÁRIO QUE O PROCESSO OCORREU
  ShowMessage('Dados inseridos');

  // ATUALIZA A NOTA FISCAL
  wLancNota := TfrLancNota.Create(nil);
  wLancNota.Show;
  wLancNota.wTotal := wValorTotal;
  wLancNota.edCodigoNota.Text := IntToStr(wCodNota);
  wLancNota.edCodCliente.SetFocus;
  wLancNota.btOk.Click;

  // FECHA A TELA DE CADASTRO DE ITENS
  Self.Close;

end;

procedure TfrCadItens.btRemoverClick(Sender: TObject);
var
  wPasse  : Boolean;
  wKey    : String;
begin
  inherited;

  // VERIFICA OS CAMPOS
  wPasse := True;
  if not(fVerificaQuantidade) then
     wPasse := False;

  // CASO OS CAMPOS SEJAM VÁLIDOS
  if (wPasse) then
     begin
       // REMOVE A QUANTIDADE DO ITEM ESCOLHIDO NO DICIONÁRIO
       if (wDicionario.ContainsKey(cbProduto.Text)) then
          wDicionario.Items[cbProduto.Text].wQuant := wDicionario[cbProduto.Text].wQuant - StrToInt(edQuantidade.Text);

       // REMOVE UM ITEM SE A QUANTIDADE DELE FOR MENOR OU IGUAL A ZERO
       for wKey in wDicionario.Keys do
         begin
           if (wDicionario.Items[wKey].wQuant <= 0) then
              wDicionario.Remove(wKey);
         end;

       // ATUALIZA A LIST VIEW
       pMontrarList;
     end;

end;

procedure TfrCadItens.FormShow(Sender: TObject);
var
  wObjProd: TObjProduto;
begin
  inherited;
  // CRIA O DICIONÁRIO PARA O TLIST
  wDicionario := TDictionary<String, TObjProduto>.Create;

  // TENTA COLETAR OS DADOS DO BANCO
  try
    // COLOCA FOCO NO CAMPO DE CÓDIGO
    dmDadosPEDSCI.tbProdutos.Filtered := False;
    dmDadosPEDSCI.tbProdutos.indexFieldNames := 'BDCODPROD';
    dmDadosPEDSCI.tbProdutos.First;

    while not(dmDadosPEDSCI.tbProdutos.Eof) do
      begin
        // CRIA UM OBJETO COM OS DADOS DO PRODUTO
        wObjProd          := TObjProduto.Create;
        wObjProd.wCodProd := dmDadosPEDSCI.tbProdutos.FieldByName('BDCODPROD').AsInteger;
        wObjProd.wValUni  := dmDadosPEDSCI.tbProdutos.FieldByName('BDVALOR').AsCurrency;

        // INSERE ESSE OBJETO NO COMBOBOX
        cbProduto.Items.AddObject(dmDadosPEDSCI.tbProdutos.FieldByName('BDDESCRICAO').AsString, wobjprod);

        // AVANÇA PARA O PRÓXIMO PRODUTO CADASTRADO
        dmDadosPEDSCI.tbProdutos.Next;
      end;

    // SETA O ÍNDICE ZERO PARA O COMBOBOX
    cbProduto.ItemIndex := 0;

    // ATUALIZA A LIST VIEW
    pMontrarList;

  except
    ShowMessage('Não existem produtos cadastrados no banco');
    Self.Close;
  end;

end;

function TfrCadItens.fVerificaQuantidade: Boolean;
var
  wTemp : Integer;
begin
  // TENTA CONVERTER A STRING PARA INTEIRO
  try
    wTemp := StrToInt(edQuantidade.Text);
    lbAviso.Caption := '';

    // SE A QUANTIDADE FOR MENOR QUE ZERO UM ERRO SERÁ APONTADO
    if (wTemp <= 0) then
       raise Exception.Create('');

    Result := True;
  except
    lbAviso.Caption := 'Quantidade inválida';
    edQuantidade.SetFocus;
    Result := False;
  end;

end;

procedure TfrCadItens.pMontrarList;
var
  wKey        : String;
  wQtdEspaco  : Integer;
  wI          : Integer;
  wSaida      : String;

begin
  // REINICIA O LIST VIEW E CRIA O CABEÇALHO
  lbProdutos.Clear;
  lbProdutos.AddItem('PRODUTOS CADASTRADOS', nil);
  lbProdutos.AddItem('', nil);
  lbProdutos.AddItem('', nil);
  lbProdutos.AddItem('', nil);
  lbProdutos.AddItem('PRODUTOS                                     QUANTIDADE     SUBTOTAL', nil);

  // COLOCA CADA ITEM DO DICIONARIO NA LIST VIEW
  for wKey in wDicionario.Keys do
    begin
      // ADICIONA O NOME DO PRODUTO
      wSaida := wKey;

      // ADICIONA OS ESPAÇAMENTOS
      wQtdEspaco := 45 - Length(wSaida);
      for wI := 1 to wQtdEspaco do
        begin
          wSaida := wSaida + ' ';
        end;

      // ADICIONA A QUANTIDADE
      wSaida := wSaida + IntToStr(wDicionario[wkey].wQuant);

      // ADICIONA OS ESPAÇAMENTOS
      wQtdEspaco := 60 - Length(wSaida);
      for wI := 1 to wQtdEspaco do
        begin
          wSaida := wSaida + ' ';
        end;

      // ADICIONA O SUBTOTAL DO ITEM
      wSaida := wSaida + CurrToStr((wDicionario[wKey].wValUni * wDicionario[wKey].wQuant));

      // COLOCA O ITEM NA LISTA
      lbProdutos.AddItem(wSaida, nil);
    end;

end;

procedure TfrCadItens.pPullBanco;
var
  wObjProd : TObjProduto;
begin
  // FILTRA OS ITENS COM O CÓDIGO DE EMPRESA E NOTA
  dmDadosPEDSCI.tbItens.IndexFieldNames := 'BDCODITEM';
  dmDadosPEDSCI.tbItens.Filtered        := False;
  dmDadosPEDSCI.tbItens.Filter          := '(BDCODNOTA = ' + IntToStr(wCodNota) + ' and BDCODEMP = ' + IntToStr(wCodEmp) + ')';
  dmDadosPEDSCI.tbItens.Filtered        := True;

  // COLETA OS DADOS DO BANCO E COLOCA NO DICIONARIO
  dmDadosPEDSCI.tbItens.First;
  while not(dmDadosPEDSCI.tbItens.Eof) do
    begin
      // CRIA O OBJETO
      wObjProd          := TObjProduto.Create;
      wObjProd.wCodProd := dmDadosPEDSCI.tbItens.FieldByName('BDCODPROD').AsInteger;
      wObjProd.wValUni  := dmDadosPEDSCI.tbItens.FieldByName('BDVLRUNITARIO').AsCurrency;
      wObjProd.wQuant   := dmDadosPEDSCI.tbItens.FieldByName('BDQUANTIDADE').AsInteger;

      // COLETA O NOME DO PRODUTO
      dmDadosPEDSCI.tbProdutos.IndexFieldNames := 'BDCODPROD';
      dmDadosPEDSCI.tbProdutos.Filtered        := False;
      dmDadosPEDSCI.tbProdutos.Filter          := '(BDCODPROD = ' + IntToStr(wObjProd.wCodProd) + ')';
      dmDadosPEDSCI.tbProdutos.Filtered        := True;

      // ADICIONA NO DICIONARIO
      wDicionario.Add(dmDadosPEDSCI.tbProdutos.FieldByName('BDDESCRICAO').AsString, wObjProd);

      // AVANÇA PARA O PRÓXIMO ITEM
      dmDadosPEDSCI.tbItens.Next;
    end;

  // ATUALIZA A LIST VIEW
  pMontrarList;
end;

function TfrCadItens.setTabela: TClientDataSet;
begin
  Result := dmDadosPEDSCI.tbProdutos;
end;

end.
