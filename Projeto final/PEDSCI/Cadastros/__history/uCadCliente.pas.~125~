unit uCadCliente;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uFormPadraoCadastroPEDSCI,
  System.ImageList, Vcl.ImgList, Vcl.ComCtrls, Vcl.ToolWin, Vcl.StdCtrls, uUtilPEDSCI,
  Data.DB, Datasnap.DBClient, Vcl.Mask;

type
  TfrCadCliente = class(TfrFormPadraoCadastroPEDSCI)
    lbCodigo: TLabel;
    lbCPF: TLabel;
    lbNome: TLabel;
    lbUF: TLabel;
    lbTelefone: TLabel;
    edCodigo: TEdit;
    edNome: TEdit;
    cbUF: TComboBox;
    lbAviso: TLabel;
    mskTelefone: TMaskEdit;
    mskCPF: TMaskEdit;
    rbErro: TRadioButton;
    procedure btOkClick(Sender: TObject);
    procedure btExcluirClick(Sender: TObject);
    procedure pLimpaDados();
    procedure pColetaDados();
    procedure FormShow(Sender: TObject);
    procedure edCodigoExit(Sender: TObject);
    procedure btConsultarClick(Sender: TObject);
  private
    { Private declarations }
    // VARÍAVEIS GLOBAIS
    wTCliente                     : TCliente;

    // FUNÇÕES
    function fVerificaCodigo()    : Boolean;
    function fVerificaCPF()       : Boolean;
    function fVerificaNome()      : Boolean;
    function fVerificaTelefone()  : Boolean;
  public
    { Public declarations }
    function setTabela: TClientDataSet; override;
  end;

var
  frCadCliente: TfrCadCliente;

implementation

uses udmDadosPEDSCI, uConsCliente;

{$R *.dfm}

procedure TfrCadCliente.btConsultarClick(Sender: TObject);
begin
  inherited;
  // CRIA E MOSTRA A TELA DE CONSULTA DE CLIENTES
  TfrConsCliente.Create(edCodigo);
end;

procedure TfrCadCliente.btExcluirClick(Sender: TObject);
var
  wPasse : Boolean;
begin
  inherited;

  // VERIFICA OS CAMPOS
  wPasse := True;
  if not(fVerificaCodigo)        then
     wPasse := False
  else if not(fVerificaCPF)      then
     wPasse := False
  else if not(fVerificaNome)     then
     wPasse := False
  else if not(fVerificaTelefone) then
     wPasse := False;

  // CASO O CAMPOS ESTEJAM CORRETOS                  
  if (wPasse) then
     begin
       // COLETA OS DADOS
       pColetaDados;

       // TENTA DELETAR OS DADOS
       if (wTCliente.fDeletarCliente) then
          begin
            ShowMessage('Deletado com sucesso');
            lbAviso.Caption := '';
            pLimpaDados;
            setLimpaCampos;
          end
       else
          ShowMessage('Falha ao deletar');
     end;

end;

procedure TfrCadCliente.btOkClick(Sender: TObject);
var
  wPasse : Boolean;
begin
  inherited;
  
  // VERIFICA OS CAMPOS
  wPasse := True;
  if not(fVerificaCodigo)        then
     wPasse := False
  else if not(fVerificaCPF)      then
     wPasse := False
  else if not(fVerificaNome)     then
     wPasse := False
  else if not(fVerificaTelefone) then
     wPasse := False;

  // CASO OS CAMPOS ESTEJAM CORRETOS
  if (wPasse) then
     begin
       // COLETA OS DADOS
       pColetaDados;

       // ENVIA PARA O BANCO
       if (wTCliente.fInserirCliente) then
          begin
            ShowMessage('Dados inseridos');
            lbAviso.Caption := '';
            pLimpaDados;
            setLimpaCampos;
            edCodigo.SetFocus;
          end
       else
          ShowMessage('Falha ao inserir dados');
     end;

end;

procedure TfrCadCliente.edCodigoExit(Sender: TObject);
begin
  inherited;
  // CASO O CÓDIGO SEJA INVÁLIDO, NADA ACONTECERÁ
  try
    // COLOCA FOCO NO CAMPO DE CÓDIGO
    dmDadosPEDSCI.tbClientes.IndexFieldNames := 'BDCODCLI';

    // VERIFICA SE JÁ EXISTE ALGUM DADO NO BANCO
    if dmDadosPEDSCI.tbClientes.FindKey([StrToInt(edCodigo.Text)]) then
       begin
         // INSERE OS DADOS DO BANCO NOS COMPONENTES
         edCodigo.Text    := dmDadosPEDSCI.tbClientes.FieldByName('BDCODCLI').AsString;
         edNome.Text      := dmDadosPEDSCI.tbClientes.FieldByName('BDNOMECLI').AsString;
         mskCPF.Text      := dmDadosPEDSCI.tbClientes.FieldByName('BDCNPJCPF').AsString;
         mskTelefone.Text := dmDadosPEDSCI.tbClientes.FieldByName('BDTELEFONE').AsString;
         cbUF.ItemIndex   := (dmDadosPEDSCI.tbClientes.FieldByName('BDCODUF').AsInteger) - 1;
       end;
  except
  end;
  
end;

procedure TfrCadCliente.FormShow(Sender: TObject);
begin
  inherited;
  // CRIA O OBJETO CLIENTE
  wTCliente := TCliente.Create;

  // LIMPA OS CAMPOS E OS DADOS
  setLimpaCampos;
  pLimpaDados;

  // PREPARA O LABEL DE AVISO
  lbAviso.Font.Color := clRed;
  lbAviso.Caption := '';
end;

function TfrCadCliente.fVerificaCodigo: Boolean;
var
  wTemp : Integer;
begin
  // TENTA CONVERTER A STRING PARA INTEIRO
  try
    wTemp   := StrToInt(edCodigo.Text);
    Result  := True;
  except
    edCodigo.SetFocus;
    lbAviso.Caption := 'Código inválido';
    Result          := False;
  end;
end;

function TfrCadCliente.fVerificaCPF: Boolean;
var
  wTemp     : String;
  wVlr      : String;
  wQtd      : Integer;
  wI        : Integer;
begin

  // COLETA A QUANTIDADE DE ESPAÇOS EM BRANCO NO CPF
  wQtd := 0;
  for wI := 0 to Length(mskCPF.Text) do
    begin
      if (mskCPF.Text[wI] = ' ') then
         wQtd := wQtd + 1;
    end;

  // SE EXISTIREM ESPAÇOS O CAMPO É INVALIDADO
  if (wQtd > 0) then
     begin
       mskCPF.SetFocus;
       lbAviso.Caption := 'CPF inválido';
       Result          := False;
       Exit;
     end;

  // COLETA OS CARACTERES NECESSÁRIOS E VERIFICA O CPF
  wTemp :=         Copy(mskCPF.Text,  1, 3);
  wTemp := wTemp + Copy(mskCPF.Text,  5, 3);
  wTemp := wTemp + Copy(mskCPF.Text,  9, 3);
  wTemp := wTemp + Copy(mskCPF.Text, 13, 2);

  // CALCULA OS DOIS ÚLTIMOS DÍGITOS DO CPF A PARTIR DA STRING INFORMADA
  wVlr := Copy(wTemp, 1,9);
  wVlr := wVlr + IntToStr(wTCliente.fCalculaCPF(wVlr));
  wVlr := wVlr + IntToStr(wTCliente.fCalculaCPF(wVlr));

  // SE OS NÚMEROS FOREM IGUAIS O CPF É VÁLIDO
  if (wVlr = wTemp) then
     Result := True
  else
     begin
       mskCPF.SetFocus;
       lbAviso.Caption := 'CPF inválido';       
       Result          := False;
       Exit;
     end;

end;

function TfrCadCliente.fVerificaNome: Boolean;
var
  wTemp : String;
begin

  // VERIFICA SE O NOME NÃO É APENAS ESPAÇOS EM BRANCO E CORTA OS ESPAÇOS INÚTEIS
  wTemp       := edNome.Text;
  wTemp       := StringReplace(wTemp, ' ', EmptyStr, [rfReplaceAll]);
  edNome.Text := TrimLeft(edNome.Text);
  edNome.Text := TrimRight(edNome.Text);

  // SE NÃO HOUVEREM CARACTERES NO NOME, O CAMPO É INVALIDADO
  if (edNome.Text = '') or (wTemp = '') then
     begin
       edNome.SetFocus;
       lbAviso.Caption := 'Nome inválido';       
       Result          := False;
     end
  // SE O NOME FOR MUITO GRANDE O CAMPO É INVALIDADO
  else if ((Length(edNome.Text)) > 200) then
     begin
       edNome.SetFocus;
       lbAviso.Caption := 'Nome muito grande';
       Result          := False;
     end
  else
     Result := True;
end;

function TfrCadCliente.fVerificaTelefone: Boolean;
var
  wQTD : Integer;
  wI   : Integer;
begin

  // COLETA A QUANTIDADE DE ESPAÇOS EM BRANCO NO CAMPO
  wQTD := 0;
  for wI := 0 to Length(mskTelefone.Text) do
    begin
      if (mskTelefone.Text[wI] = ' ') then
         wQTD := wQTD + 1;
    end;

  // SE HOUVEREM ESPAÇOS EM BRANCO, O CAMPO É INVALIDADO
  if (wQTD > 0) then
     begin
       mskTelefone.SetFocus;
       lbAviso.Caption := 'Telefone inválido';
       Result          := False;
       exit;
     end
  else
     Result := True;
end;

procedure TfrCadCliente.pColetaDados;
begin
  // COLETA TODOS OS CAMPOS DA TELA
  wTCliente.wCod      := StrToInt(edCodigo.Text);
  wTCliente.wCPF      := mskCPF.Text;
  wTCliente.wNome     := edNome.Text;
  wTCliente.wCodUF    := cbUF.ItemIndex;
  wTCliente.wTelefone := mskTelefone.Text;
end;

procedure TfrCadCliente.pLimpaDados;
begin
  // LIMPA TODOS OS DADOS DA CLASSE CLIENTE
  wTCliente.wCod      := 0;
  wTCliente.wCPF      := '';
  wTCliente.wNome     := '';
  wTCliente.wCodUF    := 0;
  wTCliente.wTelefone := '';
end;

function TfrCadCliente.setTabela: TClientDataSet;
begin
  Result := dmDadosPEDSCI.tbClientes;
end;
end.
