unit uCadEmpresas;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uFormPadraoCadastroPEDSCI,
  System.ImageList, Vcl.ImgList, Vcl.ComCtrls, Vcl.ToolWin, Vcl.StdCtrls, Datasnap.DBClient,
  Vcl.Mask, uUtilPEDSCI;

type
  TfrCadEmpresas = class(TfrFormPadraoCadastroPEDSCI)
    lbCodigo: TLabel;
    lbCNPJ: TLabel;
    lbNome: TLabel;
    lbUF: TLabel;
    lbTelefone: TLabel;
    edCodigo: TEdit;
    edCNPJ: TEdit;
    edNome: TEdit;
    cbUF: TComboBox;
    lbAviso: TLabel;
    mskTelefone: TMaskEdit;
    procedure btOkClick(Sender: TObject);
    procedure btExcluirClick(Sender: TObject);
    procedure btConsultarClick(Sender: TObject);
    procedure pLimpaDados();
    procedure pColetaDados();
    procedure FormShow(Sender: TObject);
    procedure edCodigoExit(Sender: TObject);
  private
    { Private declarations }
    wTEmpresa : TEmpresa;
    function fVerificaCodigo() : Boolean;
    function fVerificaCNPJ() : Boolean;
    function fVerificaNome() : Boolean;
    function fVerificaTelefone() : Boolean;
  public
    { Public declarations }
    function setTabela: TClientDataSet; override;
  end;

var
  frCadEmpresas: TfrCadEmpresas;
    edTelefone: TEdit;

implementation

{$R *.dfm}

uses udmDadosPEDSCI, uConsEmpresas;

procedure TfrCadEmpresas.btConsultarClick(Sender: TObject);
begin
  inherited;
  TfrConsEmpresas.Create(edCodigo);
end;

procedure TfrCadEmpresas.btExcluirClick(Sender: TObject);
begin
  inherited;
  // COLETA OS DADOS
  pColetaDados;

  // TENTA DELETAR OS DADOS
  if (wTEmpresa.fDeletarEmpresa) then
     begin
       ShowMessage('Deletado com sucesso');
       setLimpaCampos;
     end
  else
     ShowMessage('Falha ao deletar');
end;

procedure TfrCadEmpresas.btOkClick(Sender: TObject);
var
  wPasse : Boolean;
begin
  inherited;

  // VERIFICA SE OS DADOS ESTÃO CORRETOS
  wPasse := True;
  if not(fVerificaCodigo) then
     wPasse := False
  else if not(fVerificaCNPJ) then
     wPasse := False
  else if not(fVerificaNome) then
     wPasse := False
  else if not(fVerificaTelefone) then
     wPasse := False;

  if (wPasse) then
     begin
       // COLETA OS DADOS
       pColetaDados;

       // ENVIA PARA O BANCO
       if (wTEmpresa.fInserirEmpresa) then
          begin
            ShowMessage('Dados inseridos');
            lbAviso.Caption := '';
            pLimpaDados;
          end
       else
          ShowMessage('Falha ao inserir dados');
     end;

end;

procedure TfrCadEmpresas.edCodigoExit(Sender: TObject);
begin
  inherited;
  // VERIFICA SE JA TEM UMA EMPRESA COM ESSE CODIGO CADASTRADA NO BANCO E TENTA RECUPERAR OS DADOS
  try
    // COLOCA FOCO NO CAMPO DE CÓDIGO
    dmDadosPEDSCI.tbEmpresas.IndexFieldNames := 'BDCODEMP';

    // VERIFICA SE JÁ EXISTE ALGUM DADO NO BANCO
    if dmDadosPEDSCI.tbEmpresas.FindKey([StrToInt(edCodigo.Text)]) then
       begin
         // INSERE OS DADOS DO BANCO NOS COMPONENTES
         edCodigo.Text := dmDadosPEDSCI.tbEmpresas.FieldByName('BDCODEMP').AsString;
         edNome.Text := dmDadosPEDSCI.tbEmpresas.FieldByName('BDNOMEEMP').AsString;
         edCNPJ.Text := dmDadosPEDSCI.tbEmpresas.FieldByName('BDCNPJCPF').AsString;
         mskTelefone.Text := dmDadosPEDSCI.tbEmpresas.FieldByName('BDTELEFONE').AsString;
         cbUF.ItemIndex := (dmDadosPEDSCI.tbEmpresas.FieldByName('BDCODUF').AsInteger) - 1;
       end;
  except
  end;

end;

procedure TfrCadEmpresas.FormShow(Sender: TObject);
begin
  inherited;
  // CRIA A VARIÁVEL EMPRESA
  wTEmpresa := TEmpresa.Create();

  // LIMPA OS CAMPOS
  setLimpaCampos;
  pLimpaDados;

  // PREPARA O LABEL DE AVISO
  lbAviso.Font.Color := clRed;
  lbAviso.Caption := '';
end;

function TfrCadEmpresas.fVerificaCNPJ: Boolean;
var
  wReduzido, wPasse : Boolean;
  wTemp, wValorCalculado : String;
begin
  wReduzido := True;
  if (Length(edCNPJ.Text) <> 14) and (Length(edCNPJ.Text) <> 18) then
     begin
       lbAviso.Caption := 'CNPJ inválido';
       edCNPJ.SetFocus;
       Result := False;
       Exit;
     end
  else if (Length(edCNPJ.Text) = 18) then
     begin
        wPasse := False;
        wReduzido := False;
        if (Copy(edCNPJ.Text, 3, 1) <> '.') then
           wPasse := True
        else if (Copy(edCNPJ.Text, 7, 1) <> '.') then
           wPasse := True
        else if (Copy(edCNPJ.Text, 11, 1) <> '/') then
           wPasse := True
        else if (Copy(edCNPJ.Text, 16, 1) <> '-') then
           wPasse := True;
        if (wPasse) then
           begin
             lbAviso.Caption := 'CNPJ inválido';
             edCNPJ.SetFocus;
             Result := False;
             Exit;
           end;
     end;

  if not(wReduzido) then
     begin
       wTemp := Copy(edCNPJ.Text, 1, 2);
       wTemp := wTemp + Copy(edCNPJ.Text, 4, 3);
       wTemp := wTemp + Copy(edCNPJ.Text, 8, 3);
       wTemp := wTemp + Copy(edCNPJ.Text, 12, 4);
       wTemp := wTemp + Copy(edCNPJ.Text, 17, 2);
       edCNPJ.Text := wTemp;
     end;

  wValorCalculado := Copy(edCNPJ.Text, 1,12);
  wValorCalculado := wValorCalculado + IntToStr(wTEmpresa.fCalculaCNPJ(wValorCalculado));
  wValorCalculado := wValorCalculado + IntToStr(wTEmpresa.fCalculaCNPJ(wValorCalculado));
  if (wValorCalculado = edCNPJ.Text) then
     Result := True
  else
     begin
       lbAviso.Caption := 'CNPJ inválido';
       edCNPJ.SetFocus;
       Result := False;
     end;
end;

function TfrCadEmpresas.fVerificaCodigo: Boolean;
var
  wTemp : Integer;
begin
  try
    wTemp := StrToInt(edCodigo.Text);
    Result := True;
  except
    lbAviso.Caption := 'Código inválido';
    edCodigo.SetFocus;
    Result := False;
  end;
end;

function TfrCadEmpresas.fVerificaNome: Boolean;
begin
  if (edNome.Text = '') then
     begin
       lbAviso.Caption := 'Nome inválido';
       edNome.SetFocus;
       Result := False;
     end
  else if ((Length(edNome.Text)) > 500) then
     begin
       lbAviso.Caption := 'Nome muito grande';
       edNome.SetFocus;
       Result := False;
     end
  else
     Result := True;
end;

function TfrCadEmpresas.fVerificaTelefone: Boolean;
var
  wQTD, wI : Integer;
begin
  ShowMessage(IntToStr(Length(mskTelefone.Text)));
  if (Length(mskTelefone.Text) <> 13) then
     begin
       lbAviso.Caption := 'Telefone inválido';
       mskTelefone.SetFocus;
       Result := False;
       exit;
     end
  else
     Result := True;
end;

procedure TfrCadEmpresas.pColetaDados;
var
  wTelefone : String;
begin
  // Coleta os dados na tela
  wTEmpresa.wCod := StrToInt(edCodigo.Text);
  wTEmpresa.wCNPJ := edCNPJ.Text;
  wTEmpresa.wNome := edNome.Text;
  wTEmpresa.wCodUF := cbUF.ItemIndex;
  wTEmpresa.wTelefone := mskTelefone.Text;
end;

procedure TfrCadEmpresas.pLimpaDados;
begin
  wTEmpresa.wCod := 0;
  wTEmpresa.wCNPJ := '';
  wTEmpresa.wNome := '';
  wTEmpresa.wCodUF := 0;
  wTEmpresa.wTelefone := '';
end;

function TfrCadEmpresas.setTabela: TClientDataSet;
begin
  Result := dmDadosPEDSCI.tbEmpresas;
end;

end.
